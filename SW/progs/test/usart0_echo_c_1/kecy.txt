
Skip to content
Chat history
You said:
Programuju pro atmega2560 v asembleru, ale chtel bych pouzit i nejake Cckove funkce a knihovny (pro zacatek deleni, nasobeni, casem mozna i vic).
Mam uz napsane nejake funkce jako RX0_Read a TX0_Write pro komunikaci, k tomu nejake ISR rutiny jako USART0_RX_ISR a USART0_UDRE_ISR a nejaky minimalni framwork okolo. Moje adresarova struktura ted vypada asi takto:

./libs
./libs/Serial
./libs/Serial/usart0
./libs/Serial/usart0/usart0.S
./libs/Serial/usart0/usart0.h
./libs/Serial.RTS
./libs/Serial.RTS/usart0
./libs/Serial.RTS/usart0/usart0.S
./libs/isr_stub
./libs/isr_stub/isr_stub.S
./libs/vectors_table
./libs/vectors_table/vectors_table.S
./progs
./progs/test
./progs/test/usart0_echo2
./progs/test/usart0_echo2/usart0_echo2.S
./progs/test/usart0_echo
./progs/test/usart0_echo/usart0_echo.S
./progs/demo
./progs/demo/serial_out
./progs/demo/serial_out/serial_out.S


a rad bych zduplikoval nasledujici program do Ccka (pro avr-gcc) s co nejmensim moznou velikosti vysledneho kodu (bude mozna potreba nejak osetrit ISR rutiny pro komunikaci)

; usart0_echo2.S: 

;	LIBS: Serial/usart0
; LIBS:  isr_stub  vectors_table
#include <avr/io.h>
#include <avr/interrupt.h>
;	
.section .text
nop	; ctors end and trampolines will be here, lets have RESET named
; === RESET
.global RESET
RESET:
	ldi r16, hi8(RAMEND)
	out _SFR_IO_ADDR(SPH), r16
	ldi r16, lo8(RAMEND)
	out _SFR_IO_ADDR(SPL), r16
	clr r1
	out _SFR_IO_ADDR(SREG),r1
	out _SFR_IO_ADDR(EIND),r1
	out _SFR_IO_ADDR(RAMPZ),r1
	rjmp main


; === setup()
setup:
	call usart0_setup
	ldi r24, 0xFF
	out _SFR_IO_ADDR(DDRF),r24
	sts DDRK,r24
	sei ; povolit p≈ôeru≈°en√≠
	ret

loop:
	
	rcall RX0_Available
	sts PORTK,r24
	rcall TX0_Used
	out _SFR_IO_ADDR(PORTF),r24
	
	rcall RX0_Read
	tst r25
	breq 1f ; pokud nic nep≈ôi≈°lo, nedelej nic
	rcall TX0_Write ; blokuje dokud nen√≠ volno
1:
	ret
;=========================
.global main
main: 
	call setup
main_loop:
	call loop
	rjmp main_loop


Pouzita knihovna by mela asi takovouto hlavicku:

 usart0.h:

#ifndef USART0_H
#define USART0_H
void usart0_setup();
uint16_t RX0_Read();		// r24 = character (or 0), r25 = 0 if no char available, buf_used+1 otherwise
uint8_t TX0_Write(char c);	// c=char to write, r24=buf_used. BLOCKS if buffer full
uint8_t RX0_Available();	// available chars in RX buffer
uint8_t TX0_Used();		// used space in TX buffer
uint8_t TX0_Free();		// available space in TX buffer
void USART0_RX_ISR();
void USART0_UDRE_ISR();

#endif
ChatGPT said:

Skvƒõl√©, ≈æe u≈æ m√°te hotov√Ω asm framework pro ATmega2560! Pokud chcete zaƒç√≠t vyu≈æ√≠vat C, ale p≈ôitom zachovat va≈°e existuj√≠c√≠ ISR a funkce (zejm√©na ty v assembleru), je to plnƒõ mo≈æn√© ‚Äì AVR-GCC to umo≈æ≈àuje velmi flexibilnƒõ.

N√≠≈æe m√°te ekvivalent programu usart0_echo2.S p≈ôepsan√Ω do C, s minimem re≈æie nav√≠c. Pou≈æ√≠v√° va≈°e existuj√≠c√≠ ASM knihovny (p≈ôes hlaviƒçku usart0.h), zachov√°v√° vektor p≈ôeru≈°en√≠ a m√° minim√°ln√≠ main() s ruƒçn√≠ inicializac√≠ stack pointeru atd., pokud chcete m√≠t p≈ôesn√Ω kontrolovan√Ω n√°bƒõh.
üóÇ Struktura

Nechme strukturu slo≈æek tak, jak je. P≈ôid√°me jen jeden nov√Ω C soubor, nap≈ô.:

./progs/test/usart0_echo2_c
./progs/test/usart0_echo2_c/main.c

üìÑ main.c:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "usart0.h"

// Vlastn√≠ implementace "RESET" handleru
void RESET(void) __attribute__((naked, section(".init0")));
void RESET(void) {
	__asm__ __volatile__ (
		"ldi r16, hi8(%[ramend])\n\t"
		"out %[sph], r16\n\t"
		"ldi r16, lo8(%[ramend])\n\t"
		"out %[spl], r16\n\t"
		"clr r1\n\t"
		"out %[sreg], r1\n\t"
		"out %[eind], r1\n\t"
		"out %[rampz], r1\n\t"
		:
		: [ramend] "M" (RAMEND),
		  [sph] "I" (_SFR_IO_ADDR(SPH)),
		  [spl] "I" (_SFR_IO_ADDR(SPL)),
		  [sreg] "I" (_SFR_IO_ADDR(SREG)),
		  [eind] "I" (_SFR_IO_ADDR(EIND)),
		  [rampz] "I" (_SFR_IO_ADDR(RAMPZ))
	);
	// skok na main()
	__asm__ __volatile__("rjmp main");
}

void setup(void) {
	usart0_setup();
	DDRF = 0xFF;
	DDRK = 0xFF;
	sei();
}

void loop(void) {
	uint8_t rx_avail = RX0_Available();
	PORTK = rx_avail;

	uint8_t tx_used = TX0_Used();
	PORTF = tx_used;

	uint16_t ch = RX0_Read();
	if (ch >> 8) { // Pokud r25 != 0
		TX0_Write((char)ch); // Blokuje dokud nen√≠ volno
	}
}

int main(void) {
	setup();
	while (1) {
		loop();
	}
}

üõ† Kompilace

P≈ôedpokl√°dejme, ≈æe assembler soubory kompilujete ruƒçnƒõ nebo makefilem. V√°≈° Makefile by mƒõl vypadat nƒõjak takto:

CC=avr-gcc
OBJCOPY=avr-objcopy
CFLAGS=-Os -mmcu=atmega2560 -std=gnu99 -ffreestanding -fno-exceptions -fno-unwind-tables -nostdlib
ASFLAGS=-mmcu=atmega2560
LDFLAGS=-Wl,-Ttext=0

OBJS=\
	libs/Serial/usart0/usart0.o \
	libs/isr_stub/isr_stub.o \
	libs/vectors_table/vectors_table.o \
	progs/test/usart0_echo2_c/main.o

all: usart0_echo2_c.hex

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

%.o: %.S
	$(CC) $(ASFLAGS) -c $< -o $@

usart0_echo2_c.elf: $(OBJS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(OBJS)

usart0_echo2_c.hex: usart0_echo2_c.elf
	$(OBJCOPY) -O ihex -R .eeprom $< $@

‚ùó D≈Øle≈æit√© pozn√°mky

    Reset vektor: RESET() je um√≠stƒõn do .init0, ƒç√≠m≈æ nahrad√≠te v√Ωchoz√≠ __ctors, init atd. z C runtime. Pokud ale ƒçasem p≈ôejdete na v√≠ce C funkc√≠ a pou≈æijete statick√© promƒõnn√©, m≈Ø≈æete pak vr√°tit ƒç√°st standardn√≠ inicializace.

    ISR v assembleru: Pokud USART0_RX_ISR() a USART0_UDRE_ISR() jsou v ASM, staƒç√≠ aby byly spr√°vnƒõ pojmenovan√© a p≈ôipojen√© do vektorov√© tabulky (co≈æ u≈æ m√°te ve va≈°√≠ vectors_table.S). Nen√≠ pot≈ôeba ps√°t je v C ani je redefinovat.

    Minimalizace k√≥du:

        -Os zaji≈°≈•uje velikostn√≠ optimalizaci.

        -nostdlib, -ffreestanding zaji≈°≈•uj√≠, ≈æe C runtime nebude nata≈æen zbyteƒçnƒõ.

        Nepou≈æ√≠vejte printf, malloc apod., pokud chcete z≈Østat mal√≠.

‚úÖ Shrnut√≠

T√≠mto p≈ô√≠stupem:

    zachov√°te sv≈Øj st√°vaj√≠c√≠ assembler k√≥d

    p≈ôid√°te jednoduch√© C rozhran√≠

    m≈Ø≈æete nad√°le pou≈æ√≠vat C funkce i standardn√≠ knihovny (ƒç√°steƒçnƒõ)

    v√Ωstupn√≠ bin√°rka bude st√°le velmi mal√°

Chcete, abych v√°m pomohl p≈ôizp≈Øsobit nebo zjednodu≈°it Makefile, nebo roz≈°√≠≈ôit o knihovny jako libm, ale selektivnƒõ (nap≈ô. jen dƒõlen√≠/n√°soben√≠)?
Do you like this personality?


ChatGPT can make mistakes. Check important info. See Cookie Preferences.
